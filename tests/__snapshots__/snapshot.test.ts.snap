// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic transformation: code 1`] = `
"/* ExampleComponent.svelte generated by Svelte v3.38.2 */
\\"use strict\\";

const { SvelteComponentDev, add_location, attr_dev, detach_dev, dispatch_dev, element, init, insert_dev, noop, safe_not_equal, space, text, validate_slots } = require(\\"svelte/internal\\");
const file = \\"ExampleComponent.svelte\\";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;

	const block = {
		c: function create() {
			button = element(\\"button\\");
			t0 = space();
			t1 = text(/*a*/ ctx[0]);
			attr_dev(button, \\"id\\", \\"btn\\");
			attr_dev(button, \\"class\\", \\"svelte-1jer79s\\");
			add_location(button, file, 10, 0, 100);
		},
		l: function claim(nodes) {
			throw new Error(\\"options.hydrate only works if the component was compiled with the \`hydratable: true\` option\\");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev(\\"SvelteRegisterBlock\\", {
		block,
		id: create_fragment.name,
		type: \\"component\\",
		source: \\"\\",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots(\\"ExampleComponent\\", slots, []);
	\\"use strict\\";
	let a;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \\"$$\\") console.warn(\`<ExampleComponent> was created with unknown prop '\${key}'\`);
	});

	$$self.$capture_state = () => ({ a });

	$$self.$inject_state = $$props => {
		if (\\"a\\" in $$props) $$invalidate(0, a = $$props.a);
	};

	if ($$props && \\"$$inject\\" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [a];
}

class ExampleComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev(\\"SvelteRegisterComponent\\", {
			component: this,
			tagName: \\"ExampleComponent\\",
			options,
			id: create_fragment.name
		});
	}
}

exports.default = ExampleComponent;Object.defineProperty(exports, \\"__esModule\\", { value: true });"
`;

exports[`basic transformation: sourcemap 1`] = `
Object {
  "mappings": ";;;;;;;;;;;;;;;mBAWC,GAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAXgB,YAAY;KAC1B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": Array [],
  "sources": Array [
    "ExampleComponent.svelte",
  ],
  "sourcesContent": Array [
    "<script lang=\\"ts\\">\\"use strict\\";
let a;
</script>

<style>
  button {
    color: #000;
  }
</style>

<button id=\\"btn\\" />
{a}
",
  ],
  "version": 3,
}
`;

exports[`transform to ESM: code 1`] = `
"/* ExampleComponent.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponentDev,
	add_location,
	attr_dev,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	space,
	text,
	validate_slots
} from \\"svelte/internal\\";

const file = \\"ExampleComponent.svelte\\";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;

	const block = {
		c: function create() {
			button = element(\\"button\\");
			t0 = space();
			t1 = text(/*a*/ ctx[0]);
			attr_dev(button, \\"id\\", \\"btn\\");
			attr_dev(button, \\"class\\", \\"svelte-1jer79s\\");
			add_location(button, file, 10, 0, 100);
		},
		l: function claim(nodes) {
			throw new Error(\\"options.hydrate only works if the component was compiled with the \`hydratable: true\` option\\");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev(\\"SvelteRegisterBlock\\", {
		block,
		id: create_fragment.name,
		type: \\"component\\",
		source: \\"\\",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots(\\"ExampleComponent\\", slots, []);
	\\"use strict\\";
	let a;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \\"$$\\") console.warn(\`<ExampleComponent> was created with unknown prop '\${key}'\`);
	});

	$$self.$capture_state = () => ({ a });

	$$self.$inject_state = $$props => {
		if (\\"a\\" in $$props) $$invalidate(0, a = $$props.a);
	};

	if ($$props && \\"$$inject\\" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [a];
}

class ExampleComponent extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev(\\"SvelteRegisterComponent\\", {
			component: this,
			tagName: \\"ExampleComponent\\",
			options,
			id: create_fragment.name
		});
	}
}

export default ExampleComponent;"
`;

exports[`transform to ESM: sourcemap 1`] = `
Object {
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAWC,GAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAXgB,YAAY;KAC1B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": Array [],
  "sources": Array [
    "ExampleComponent.svelte",
  ],
  "sourcesContent": Array [
    "<script lang=\\"ts\\">\\"use strict\\";
let a;
</script>

<style>
  button {
    color: #000;
  }
</style>

<button id=\\"btn\\" />
{a}
",
  ],
  "version": 3,
}
`;

exports[`with options: code 1`] = `
"/* ExampleComponent.svelte generated by Svelte v3.38.2 */
\\"use strict\\";

const { SvelteElement, add_location, attr_dev, attribute_to_object, detach_dev, dispatch_dev, element, init, insert_dev, noop, safe_not_equal, space, text, validate_slots } = require(\\"svelte/internal\\");
const file = \\"ExampleComponent.svelte\\";

function create_fragment(ctx) {
	let button;
	let t0;
	let t1;

	const block = {
		c: function create() {
			button = element(\\"button\\");
			t0 = space();
			t1 = text(/*a*/ ctx[0]);
			this.c = noop;
			attr_dev(button, \\"id\\", \\"btn\\");
			add_location(button, file, 10, 0, 100);
		},
		l: function claim(nodes) {
			throw new Error(\\"options.hydrate only works if the component was compiled with the \`hydratable: true\` option\\");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, t1, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev(\\"SvelteRegisterBlock\\", {
		block,
		id: create_fragment.name,
		type: \\"component\\",
		source: \\"\\",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots(\\"snapshot-example\\", slots, []);
	\\"use strict\\";
	let a;
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== \\"$$\\") console.warn(\`<snapshot-example> was created with unknown prop '\${key}'\`);
	});

	$$self.$capture_state = () => ({ a });

	$$self.$inject_state = $$props => {
		if (\\"a\\" in $$props) $$invalidate(0, a = $$props.a);
	};

	if ($$props && \\"$$inject\\" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [a];
}

class ExampleComponent extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = \`<style>button{color:#000}</style>\`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{}
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define(\\"snapshot-example\\", ExampleComponent);
exports.default = ExampleComponent;Object.defineProperty(exports, \\"__esModule\\", { value: true });"
`;

exports[`with options: sourcemap 1`] = `
Object {
  "mappings": ";;;;;;;;;;;;;;;mBAWC,GAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAXgB,YAAY;KAC1B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": Array [],
  "sources": Array [
    "ExampleComponent.svelte",
  ],
  "sourcesContent": Array [
    "<script lang=\\"ts\\">\\"use strict\\";
let a;
</script>

<style>
  button {
    color: #000;
  }
</style>

<button id=\\"btn\\" />
{a}
",
  ],
  "version": 3,
}
`;
